name: Terraform Testing

env:
  TERRAFORM_VERSION: latest
  AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}
  TF_VAR_AWS_DEFAULT_REGION: ${{ vars.AWS_DEFAULT_REGION }}

on:
  pull_request:
    paths:
      - '**.tf'

permissions:
  contents: read
  pull-requests: write

jobs: 
  terraform-validation:
    runs-on: ubuntu-latest
    name: Terraform - Validation (${{ matrix.environment }})
    
    environment: ${{ matrix.environment }}
    strategy:
      matrix: 
        environment: 
        - dev
        - prod
    concurrency: 
      group: ${{ matrix.environment }}
      cancel-in-progress: false

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_env: ${{ matrix.environment }}
      TF_VAR_name: ${{ github.event.repository.name }}
      TF_VAR_admin_role_arn: ${{ secrets.TF_VAR_ADMIN_ROLE_ARN }}
      
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-region: ${{ vars.AWS_DEFAULT_REGION }}

    - name: Configure Kubectl Credentials
      run: aws eks update-kubeconfig --name ${{ github.event.repository.name }}
      continue-on-error: true

    - name: Set tfstate_bucket env var
      run: echo "tfstate_bucket=terraform-$(aws sts get-caller-identity | jq -r '.Account')" >> $GITHUB_ENV

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - name: Terraform Init
      id: init
      run: >
        terraform init \
          -upgrade \
          -backend-config "region=$TF_VAR_AWS_DEFAULT_REGION" \
          -backend-config "bucket=$tfstate_bucket" \
          -backend-config "key=${{ github.event.repository.name }}"

    - name: Terraform Validate
      id: validate
      run: terraform validate -no-color
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan -input=false -no-color
      continue-on-error: false
    
    - uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          // 1. Retrieve existing bot comments for the PR
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          })
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style 🖌') && comment.body.includes('Environment: ${{ matrix.environment }}')
          })

          // 2. Prepare format of the comment
          const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
          Environment: ${{ matrix.environment }}
          #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
          #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
          <details><summary>Validation Output</summary>

          \`\`\`\n
          ${{ steps.validate.outputs.stdout }}
          \`\`\`

          </details>

          #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

          <details><summary>Show Plan</summary>

          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`

          </details>

          *Pusher: ${{ github.actor }}, Action: \`${{ github.event_name }}\`, Workflow: \`${{ github.workflow }}\`*`;

          // 3. If we have a comment, update it, otherwise create a new one
          if (botComment) {
            github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: output
            })
          } else {
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
          }
